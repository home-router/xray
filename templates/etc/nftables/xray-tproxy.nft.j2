define xray_tproxy_port = {{ xray_tproxy_port }}
# Common private network address.
define xray_private_addr = { 224.0.0.0/4, 255.255.255.255, 127.0.0.0/8, 10.0.0.0/8, 172.16.0.0/20, 192.168.0.0/16 }
#define xray_private_addr_ip6 = { ::1/128, fc00::/7, fe80::/10 }

{% if xray_tproxy_local_traffic['enable'] %}
{# TODO ipv6 local addresses and rules. #}
define xray_local_address = { {{ xray_local_address }}, 127.0.0.0/8 }
define xray_direct_mark = { {{ xray_direct_firewall_marks | join(', ') }} }
{%   if 'direct_tcp_src_ports' in xray_tproxy_local_traffic %}
define xray_direct_local_tcp_sports = { {{ xray_tproxy_local_traffic['direct_tcp_src_ports'] | join(', ') }} }
{%   endif %}
{%   if 'direct_udp_src_ports' in xray_tproxy_local_traffic %}
define xray_direct_local_udp_sports = { {{ xray_tproxy_local_traffic['direct_udp_src_ports'] | join(', ') }} }
{%   endif %}
{% endif %}

# Disable connection tracking for DNS service.
table inet raw {
	chain DNS_PREROUTING {
		type filter hook prerouting priority raw; policy accept;
		udp dport 53 counter notrack;
	}
	chain DNS_OUTPUT {
		type filter hook output priority raw; policy accept;
		udp sport 53 counter notrack;
	}
}

table inet mangle {
	set geoip_cn {
		type ipv4_addr
		flags interval;
	}

	chain XRAY_PREROUTING {
		# Lower priority value than mangle means higher priority.
		type filter hook prerouting priority mangle - 1; policy accept;

{% if xray_tproxy_src_addresses is defined %}
		# Do Xray transparent proxy only for specific source addresses.
		{# TODO how to match ipv6 lan client addresses when using SLAAC and ipv6 privacy extension. #}
{%   for itf, addrs in xray_tproxy_src_addresses.items() %}
		iif "{{ itf }}" ip saddr { {{ addrs | join(', ') }} } jump XRAY_TPROXY
{%   endfor %}
{% else %}
		jump XRAY_TPROXY
{% endif%}
	}

	chain XRAY_TPROXY {
		# No transparent proxy for private address destination.
		ip daddr $xray_private_addr counter return
		{#ip6 daddr $xray_private_addr_ip6 counter return #}

		ip daddr @geoip_cn counter return

		# Xray supports only TCP and UDP
		ip protocol != { tcp, udp } counter return
		# ip6 nexthdr { tcp, udp } counter return

		# Add mark for TCP and UDP packets, redirect to xray port.
		ip protocol { tcp, udp } tproxy ip to 127.0.0.1:$xray_tproxy_port counter meta mark set {{ xray_route_firewall_mark }}
		# ip6 nexthdr { tcp, udp } tproxy ip6 to [::1]:$xray_tproxy_port counter meta mark set {{ xray_route_firewall_mark }}
	}

{% if xray_tproxy_local_traffic['enable'] %}
	chain XRAY_OUTPUT {
		type route hook output priority mangle - 1; policy accept;

		ip daddr $xray_private_addr return

		ip daddr @geoip_cn counter return

		# Do not use transparent proxy for traffic explicitly marked to be direct.
		meta mark $xray_direct_mark counter return

		# Xray supports only TCP and UDP
		ip protocol != { tcp, udp } counter return
		#ip6 nexthdr { tcp, udp } counter return

{% if xray_tproxy_local_traffic['enable'] %}
{%   if 'direct_tcp_src_ports' in xray_tproxy_local_traffic %}
		ip saddr $xray_local_address tcp sport $xray_direct_local_tcp_sports counter return
{%   endif %}
{%   if 'direct_udp_src_ports' in xray_tproxy_local_traffic %}
		ip saddr $xray_local_address udp sport $xray_direct_local_udp_sports counter return
{%   endif %}
{% endif %}

		# Add mark to re-enter the netfilter packet processing flow.
		counter meta mark set 1
	}
{% endif%}
}
